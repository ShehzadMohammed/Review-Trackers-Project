name: Continuous Deployment
on:
  push:
    branches: ["main"]
    paths:
      - "Terraform-Infrastructure/**.tf"
      - "Kubernetes/**.yaml"
      - "Python-Server/dockerfile"
      - "Python-Server/main.py"
  pull_request:
    branches: ["main"]
    paths:
      - "Terraform-Infrastructure/**.tf"
      - "Kubernetes/**.yaml"
  workflow_dispatch:

jobs:
  Deployment:
    runs-on: ubuntu-latest
    env:
      AKS_CLUSTER_NAME: "rtpykube"
      RESOURCE_GROUP_NAME: "rt-infra"
      RESOURCE_GROUP_LOCATION: "East US"
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Wait 1.5 Minute
        shell: bash
        run: sleep 90s

      - name: Checkout
        uses: actions/checkout@v3

      - name: Intializes Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
      
      - name: KeywordReplace For Terraform
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["Terraform-Infrastructure/variables.tf"]'
          tokenPrefix: __
          tokenSuffix: __
        env:
          AKS_CLUSTER_NAME: ${{ env.AKS_CLUSTER_NAME }}
          RESOURCE_GROUP_NAME: ${{ env.RESOURCE_GROUP_NAME }}
          RESOURCE_GROUP_LOCATION: ${{ env.RESOURCE_GROUP_LOCATION }}

      - name: Az login via cli
        if: always()
        run: az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}

      - name: Further Intialization
        shell: pwsh
        run: (Get-Content ./Terraform-Infrastructure/versions.tf).Replace('"local"', '"azurerm"') | Set-Content ./Terraform-Infrastructure/versions.tf

      - name: Terraform Intializes
        shell: pwsh
        run: |
          cd Terraform-Infrastructure
          (Get-Content ./variables.tf).Replace('replace-variable', ${{ secrets.STORAGE_ACCOUNT_NAME }}) | Set-Content ./variables.tf
          terraform init terraform init -backend-config="storage_account_name=${{ secrets.INTIAL_STORAGE_ACCOUNT }}" -backend-config="access_key=${{ secrets.INTIAL_STORAGE_KEY }}"

      - name: Terraform fmt
        run: |
          cd Terraform-Infrastructure
          terraform fmt

      - name: Terraform Plan
        run: |
          cd Terraform-Infrastructure
          terraform plan

      - name: Terraform Apply
        if: ${{ github.event_name == 'push' }}
        run: |
          cd Terraform-Infrastructure
          terraform apply --auto-approve

      - name: Az login via cli
        if: always()
        run: az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}

      - name: AKS Context
        uses: azure/aks-set-context@v3
        if: always()
        with:
          resource-group: ${{  env.RESOURCE_GROUP_NAME }}
          cluster-name: ${{  env.AKS_CLUSTER_NAME }}
          suscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: AKS Deployment
        if: ${{ github.event_name == 'push' }}
        uses: Azure/k8s-deploy@v3.1
        with:
          manifests: |
            Kubernetes/deployment.yaml
            Kubernetes/service.yaml
